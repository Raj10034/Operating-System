def simulate_page_replacement(pages, frames, algorithm='LRU'):
    memory = []
    page_faults = 0
    history = []

    for i, page in enumerate(pages):
        if page not in memory:
            page_faults += 1
            if len(memory) < frames:
                memory.append(page)
            else:
                if algorithm == 'FIFO':
                    memory.pop(0)
                elif algorithm == 'LRU':
                    lru_page = min(history, key=lambda x: history[x])
                    memory.remove(lru_page)
                memory.append(page)
        history = {pg: idx for idx, pg in enumerate(pages[:i+1]) if pg in memory}

    print(f"{algorithm} - Total Page Faults: {page_faults}")
    return page_faults

pages = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2]
frames = 3

simulate_page_replacement(pages, frames, 'FIFO')
simulate_page_replacement(pages, frames, 'LRU')
